// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 1.0.1.
// **********************************************************************

package works.weave.socks.orders.orderserver.tars.order;

import com.qq.tars.protocol.util.*;
import com.qq.tars.protocol.annotation.*;
import com.qq.tars.protocol.tars.*;
import com.qq.tars.protocol.tars.annotation.*;

@TarsStruct
public class CustomerOrderTars {

	@TarsStructProperty(order = 0, isRequire = false)
	public String id = "";
	@TarsStructProperty(order = 1, isRequire = false)
	public String customerId = "";
	@TarsStructProperty(order = 2, isRequire = false)
	public CustomerTars customer = null;
	@TarsStructProperty(order = 3, isRequire = false)
	public AddressTars address = null;
	@TarsStructProperty(order = 4, isRequire = false)
	public CardTars card = null;
	@TarsStructProperty(order = 5, isRequire = false)
	public java.util.List<ItemTars> items = null;
	@TarsStructProperty(order = 6, isRequire = false)
	public ShipmentTars shipment = null;
	@TarsStructProperty(order = 7, isRequire = false)
	public long date = 0;
	@TarsStructProperty(order = 8, isRequire = false)
	public float total = 0;

	public String getId() {
		return id;
	}

	public void setId(String id) {
		this.id = id;
	}

	public String getCustomerId() {
		return customerId;
	}

	public void setCustomerId(String customerId) {
		this.customerId = customerId;
	}

	public CustomerTars getCustomer() {
		return customer;
	}

	public void setCustomer(CustomerTars customer) {
		this.customer = customer;
	}

	public AddressTars getAddress() {
		return address;
	}

	public void setAddress(AddressTars address) {
		this.address = address;
	}

	public CardTars getCard() {
		return card;
	}

	public void setCard(CardTars card) {
		this.card = card;
	}

	public java.util.List<ItemTars> getItems() {
		return items;
	}

	public void setItems(java.util.List<ItemTars> items) {
		this.items = items;
	}

	public ShipmentTars getShipment() {
		return shipment;
	}

	public void setShipment(ShipmentTars shipment) {
		this.shipment = shipment;
	}

	public long getDate() {
		return date;
	}

	public void setDate(long date) {
		this.date = date;
	}

	public float getTotal() {
		return total;
	}

	public void setTotal(float total) {
		this.total = total;
	}

	public CustomerOrderTars() {
	}

	public CustomerOrderTars(String id, String customerId, CustomerTars customer, AddressTars address, CardTars card, java.util.List<ItemTars> items, ShipmentTars shipment, long date, float total) {
		this.id = id;
		this.customerId = customerId;
		this.customer = customer;
		this.address = address;
		this.card = card;
		this.items = items;
		this.shipment = shipment;
		this.date = date;
		this.total = total;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + TarsUtil.hashCode(id);
		result = prime * result + TarsUtil.hashCode(customerId);
		result = prime * result + TarsUtil.hashCode(customer);
		result = prime * result + TarsUtil.hashCode(address);
		result = prime * result + TarsUtil.hashCode(card);
		result = prime * result + TarsUtil.hashCode(items);
		result = prime * result + TarsUtil.hashCode(shipment);
		result = prime * result + TarsUtil.hashCode(date);
		result = prime * result + TarsUtil.hashCode(total);
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof CustomerOrderTars)) {
			return false;
		}
		CustomerOrderTars other = (CustomerOrderTars) obj;
		return (
			TarsUtil.equals(id, other.id) &&
			TarsUtil.equals(customerId, other.customerId) &&
			TarsUtil.equals(customer, other.customer) &&
			TarsUtil.equals(address, other.address) &&
			TarsUtil.equals(card, other.card) &&
			TarsUtil.equals(items, other.items) &&
			TarsUtil.equals(shipment, other.shipment) &&
			TarsUtil.equals(date, other.date) &&
			TarsUtil.equals(total, other.total) 
		);
	}

	public void writeTo(TarsOutputStream _os) {
		if (null != id) {
			_os.write(id, 0);
		}
		if (null != customerId) {
			_os.write(customerId, 1);
		}
		if (null != customer) {
			_os.write(customer, 2);
		}
		if (null != address) {
			_os.write(address, 3);
		}
		if (null != card) {
			_os.write(card, 4);
		}
		if (null != items) {
			_os.write(items, 5);
		}
		if (null != shipment) {
			_os.write(shipment, 6);
		}
		_os.write(date, 7);
		_os.write(total, 8);
	}

	static CustomerTars cache_customer;
	static { 
		cache_customer = new CustomerTars();
	}
	static AddressTars cache_address;
	static { 
		cache_address = new AddressTars();
	}
	static CardTars cache_card;
	static { 
		cache_card = new CardTars();
	}
	static java.util.List<ItemTars> cache_items;
	static { 
		cache_items = new java.util.ArrayList<ItemTars>();
		ItemTars var_1 = new ItemTars();
		cache_items.add(var_1);
	}
	static ShipmentTars cache_shipment;
	static { 
		cache_shipment = new ShipmentTars();
	}

	public void readFrom(TarsInputStream _is) {
		this.id = _is.readString(0, false);
		this.customerId = _is.readString(1, false);
		this.customer = (CustomerTars) _is.read(cache_customer, 2, false);
		this.address = (AddressTars) _is.read(cache_address, 3, false);
		this.card = (CardTars) _is.read(cache_card, 4, false);
		this.items = (java.util.List<ItemTars>) _is.read(cache_items, 5, false);
		this.shipment = (ShipmentTars) _is.read(cache_shipment, 6, false);
		this.date = _is.read(date, 7, false);
		this.total = _is.read(total, 8, false);
	}

}
