// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 1.0.1.
// **********************************************************************

package works.weave.socks.orders.orderserver.tars.order;

import com.qq.tars.protocol.util.*;
import com.qq.tars.protocol.annotation.*;
import com.qq.tars.protocol.tars.*;
import com.qq.tars.protocol.tars.annotation.*;

@TarsStruct
public class ItemTars {

	@TarsStructProperty(order = 0, isRequire = false)
	public String id = "";
	@TarsStructProperty(order = 1, isRequire = false)
	public String itemId = "";
	@TarsStructProperty(order = 2, isRequire = false)
	public int quantity = 0;
	@TarsStructProperty(order = 3, isRequire = false)
	public float unitPrice = 0;

	public String getId() {
		return id;
	}

	public void setId(String id) {
		this.id = id;
	}

	public String getItemId() {
		return itemId;
	}

	public void setItemId(String itemId) {
		this.itemId = itemId;
	}

	public int getQuantity() {
		return quantity;
	}

	public void setQuantity(int quantity) {
		this.quantity = quantity;
	}

	public float getUnitPrice() {
		return unitPrice;
	}

	public void setUnitPrice(float unitPrice) {
		this.unitPrice = unitPrice;
	}

	public ItemTars() {
	}

	public ItemTars(String id, String itemId, int quantity, float unitPrice) {
		this.id = id;
		this.itemId = itemId;
		this.quantity = quantity;
		this.unitPrice = unitPrice;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + TarsUtil.hashCode(id);
		result = prime * result + TarsUtil.hashCode(itemId);
		result = prime * result + TarsUtil.hashCode(quantity);
		result = prime * result + TarsUtil.hashCode(unitPrice);
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof ItemTars)) {
			return false;
		}
		ItemTars other = (ItemTars) obj;
		return (
			TarsUtil.equals(id, other.id) &&
			TarsUtil.equals(itemId, other.itemId) &&
			TarsUtil.equals(quantity, other.quantity) &&
			TarsUtil.equals(unitPrice, other.unitPrice) 
		);
	}

	public void writeTo(TarsOutputStream _os) {
		if (null != id) {
			_os.write(id, 0);
		}
		if (null != itemId) {
			_os.write(itemId, 1);
		}
		_os.write(quantity, 2);
		_os.write(unitPrice, 3);
	}


	public void readFrom(TarsInputStream _is) {
		this.id = _is.readString(0, false);
		this.itemId = _is.readString(1, false);
		this.quantity = _is.read(quantity, 2, false);
		this.unitPrice = _is.read(unitPrice, 3, false);
	}

}
