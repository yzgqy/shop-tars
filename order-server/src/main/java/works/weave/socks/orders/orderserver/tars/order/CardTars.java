// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 1.0.1.
// **********************************************************************

package works.weave.socks.orders.orderserver.tars.order;

import com.qq.tars.protocol.util.*;
import com.qq.tars.protocol.annotation.*;
import com.qq.tars.protocol.tars.*;
import com.qq.tars.protocol.tars.annotation.*;

@TarsStruct
public class CardTars {

	@TarsStructProperty(order = 0, isRequire = false)
	public String id = "";
	@TarsStructProperty(order = 1, isRequire = false)
	public String longNum = "";
	@TarsStructProperty(order = 2, isRequire = false)
	public String expires = "";
	@TarsStructProperty(order = 3, isRequire = false)
	public String ccv = "";

	public String getId() {
		return id;
	}

	public void setId(String id) {
		this.id = id;
	}

	public String getLongNum() {
		return longNum;
	}

	public void setLongNum(String longNum) {
		this.longNum = longNum;
	}

	public String getExpires() {
		return expires;
	}

	public void setExpires(String expires) {
		this.expires = expires;
	}

	public String getCcv() {
		return ccv;
	}

	public void setCcv(String ccv) {
		this.ccv = ccv;
	}

	public CardTars() {
	}

	public CardTars(String id, String longNum, String expires, String ccv) {
		this.id = id;
		this.longNum = longNum;
		this.expires = expires;
		this.ccv = ccv;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + TarsUtil.hashCode(id);
		result = prime * result + TarsUtil.hashCode(longNum);
		result = prime * result + TarsUtil.hashCode(expires);
		result = prime * result + TarsUtil.hashCode(ccv);
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof CardTars)) {
			return false;
		}
		CardTars other = (CardTars) obj;
		return (
			TarsUtil.equals(id, other.id) &&
			TarsUtil.equals(longNum, other.longNum) &&
			TarsUtil.equals(expires, other.expires) &&
			TarsUtil.equals(ccv, other.ccv) 
		);
	}

	public void writeTo(TarsOutputStream _os) {
		if (null != id) {
			_os.write(id, 0);
		}
		if (null != longNum) {
			_os.write(longNum, 1);
		}
		if (null != expires) {
			_os.write(expires, 2);
		}
		if (null != ccv) {
			_os.write(ccv, 3);
		}
	}


	public void readFrom(TarsInputStream _is) {
		this.id = _is.readString(0, false);
		this.longNum = _is.readString(1, false);
		this.expires = _is.readString(2, false);
		this.ccv = _is.readString(3, false);
	}

}
