// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 1.0.1.
// **********************************************************************

package works.weave.socks.orders.orderserver.tars.order;

import com.qq.tars.protocol.util.*;
import com.qq.tars.protocol.annotation.*;
import com.qq.tars.protocol.tars.*;
import com.qq.tars.protocol.tars.annotation.*;

@TarsStruct
public class NewOrderResourceTars {

	@TarsStructProperty(order = 0, isRequire = false)
	public String customer = "";
	@TarsStructProperty(order = 1, isRequire = false)
	public String address = "";
	@TarsStructProperty(order = 2, isRequire = false)
	public String card = "";
	@TarsStructProperty(order = 3, isRequire = false)
	public String items = "";

	public String getCustomer() {
		return customer;
	}

	public void setCustomer(String customer) {
		this.customer = customer;
	}

	public String getAddress() {
		return address;
	}

	public void setAddress(String address) {
		this.address = address;
	}

	public String getCard() {
		return card;
	}

	public void setCard(String card) {
		this.card = card;
	}

	public String getItems() {
		return items;
	}

	public void setItems(String items) {
		this.items = items;
	}

	public NewOrderResourceTars() {
	}

	public NewOrderResourceTars(String customer, String address, String card, String items) {
		this.customer = customer;
		this.address = address;
		this.card = card;
		this.items = items;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + TarsUtil.hashCode(customer);
		result = prime * result + TarsUtil.hashCode(address);
		result = prime * result + TarsUtil.hashCode(card);
		result = prime * result + TarsUtil.hashCode(items);
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof NewOrderResourceTars)) {
			return false;
		}
		NewOrderResourceTars other = (NewOrderResourceTars) obj;
		return (
			TarsUtil.equals(customer, other.customer) &&
			TarsUtil.equals(address, other.address) &&
			TarsUtil.equals(card, other.card) &&
			TarsUtil.equals(items, other.items) 
		);
	}

	public void writeTo(TarsOutputStream _os) {
		if (null != customer) {
			_os.write(customer, 0);
		}
		if (null != address) {
			_os.write(address, 1);
		}
		if (null != card) {
			_os.write(card, 2);
		}
		if (null != items) {
			_os.write(items, 3);
		}
	}


	public void readFrom(TarsInputStream _is) {
		this.customer = _is.readString(0, false);
		this.address = _is.readString(1, false);
		this.card = _is.readString(2, false);
		this.items = _is.readString(3, false);
	}

}
