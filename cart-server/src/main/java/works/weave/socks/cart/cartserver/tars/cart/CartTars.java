// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 1.0.1.
// **********************************************************************

package works.weave.socks.cart.cartserver.tars.cart;

import com.qq.tars.protocol.util.*;
import com.qq.tars.protocol.annotation.*;
import com.qq.tars.protocol.tars.*;
import com.qq.tars.protocol.tars.annotation.*;

@TarsStruct
public class CartTars {

	@TarsStructProperty(order = 0, isRequire = false)
	public String customerId = "";
	@TarsStructProperty(order = 1, isRequire = false)
	public String id = "";
	@TarsStructProperty(order = 2, isRequire = false)
	public java.util.List<ItemTars> items = null;

	public String getCustomerId() {
		return customerId;
	}

	public void setCustomerId(String customerId) {
		this.customerId = customerId;
	}

	public String getId() {
		return id;
	}

	public void setId(String id) {
		this.id = id;
	}

	public java.util.List<ItemTars> getItems() {
		return items;
	}

	public void setItems(java.util.List<ItemTars> items) {
		this.items = items;
	}

	public CartTars() {
	}

	public CartTars(String customerId, String id, java.util.List<ItemTars> items) {
		this.customerId = customerId;
		this.id = id;
		this.items = items;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + TarsUtil.hashCode(customerId);
		result = prime * result + TarsUtil.hashCode(id);
		result = prime * result + TarsUtil.hashCode(items);
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof CartTars)) {
			return false;
		}
		CartTars other = (CartTars) obj;
		return (
			TarsUtil.equals(customerId, other.customerId) &&
			TarsUtil.equals(id, other.id) &&
			TarsUtil.equals(items, other.items) 
		);
	}

	public void writeTo(TarsOutputStream _os) {
		if (null != customerId) {
			_os.write(customerId, 0);
		}
		if (null != id) {
			_os.write(id, 1);
		}
		if (null != items) {
			_os.write(items, 2);
		}
	}

	static java.util.List<ItemTars> cache_items;
	static { 
		cache_items = new java.util.ArrayList<ItemTars>();
		ItemTars var_1 = new ItemTars();
		cache_items.add(var_1);
	}

	public void readFrom(TarsInputStream _is) {
		this.customerId = _is.readString(0, false);
		this.id = _is.readString(1, false);
		this.items = (java.util.List<ItemTars>) _is.read(cache_items, 2, false);
	}

}
